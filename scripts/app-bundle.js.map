{"version":3,"sources":["src/app.js","src/environment.js","src/main.js","src/resources/index.js","src/resources/attributes/input-mask.js"],"names":["App","message","debug","testing","configure","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","config","globalResources","InputmaskCustomAttribute","Element","element","options","isValid","isValidChanged","newValue","oldValue","dispatchEvent","Event","attached","$","extend","value","inputmask","on","e","originalEvent","reload","detached"],"mappings":";;;;;;;;;;;;;MAAaA,cAAAA,MACX,eAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,cAAf;AACD;;;;;;;;oBCHY;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCECC,YAAAA;;;;;;;;;;AAAT,WAASA,SAAT,CAAmBC,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYN,KAAhB,EAAuB;AACrBG,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYN,OAAhB,EAAyB;AACvBE,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQM,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAMP,QAAQQ,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UChBeT,YAAAA;AAAT,WAASA,SAAT,CAAmBU,MAAnB,EAA2B;AAChCA,WAAOC,eAAP,CAAuB,CAAC,yBAAD,CAAvB;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCcYC,mCAAAA,mCAFZ,uCAAgB,WAAhB,WACA,8BAAOC,OAAP;AAKG,0CAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AACjB,iBAAKA,OAAL,GAAeA,OAAf;;AAEA,iBAAKC,OAAL,GAAe;AACX,gCAAgB,wBAAM;AAClB,0BAAKC,OAAL,GAAe,KAAf;AACH,iBAHU;AAIX,8BAAc,sBAAM;AAChB,0BAAKA,OAAL,GAAe,IAAf;AACH;AANU,aAAf;AAQH;;2CAEDC,yCAAeC,UAAUC,UAAU;AAC/B,gBAAID,aAAaC,QAAjB,EACI,KAAKL,OAAL,CAAaM,aAAb,CAA2B,IAAIC,KAAJ,CAAU,MAAV,CAA3B;AACP;;2CAEDC,+BAAW;AAAA;;AACP,gBAAMP,UAAUQ,EAAEC,MAAF,CAAS,IAAT,EAAe,KAAKC,KAApB,EAA2B,KAAKV,OAAhC,CAAhB;AACAQ,cAAE,KAAKT,OAAP,EAAgBY,SAAhB,CAA0BX,OAA1B,EACKY,EADL,CACQ,QADR,EAEI,UAACC,CAAD,EAAO;AACH,oBAAIA,EAAEC,aAAN,EAAqB;AACjB;AACH;AACD,uBAAKf,OAAL,CAAaM,aAAb,CAA2B,IAAIC,KAAJ,CAAU,QAAV,CAA3B;AACH,aAPL;AAQH;;2CAEDS,2BAAS;AACL,iBAAKC,QAAL;AACA,iBAAKT,QAAL;AACH;;2CAEDS,+BAAW;AACPR,cAAE,KAAKT,OAAP,EAAgBY,SAAhB,CAA0B,QAA1B;AACH;;;;;;mBAvCqB","file":"app-bundle.js","sourcesContent":["export class App {\n  constructor() {\n    this.message = 'Hello World!';\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  config.globalResources(['./attributes/input-mask']);\n}\n","import {\r\n    customAttribute,\r\n    inject,\r\n    observable\r\n} from \"aurelia-framework\";\r\n\r\n\r\nimport 'inputmask';\r\nimport 'inputmask/inputmask.extensions';\r\nimport 'inputmask/inputmask.phone.extensions';\r\nimport 'inputmask/phone-codes/phone';\r\nimport 'inputmask/phone-codes/phone-be';\r\nimport 'inputmask/phone-codes/phone-ru';\r\n\r\n@customAttribute(\"inputmask\")\r\n@inject(Element)\r\nexport class InputmaskCustomAttribute {\r\n\r\n    @observable isValid = false;\r\n\r\n    constructor(element) {\r\n        this.element = element;\r\n\r\n        this.options = {\r\n            'onincomplete': () => {\r\n                this.isValid = false;\r\n            },\r\n            'oncomplete': () => {\r\n                this.isValid = true;\r\n            }\r\n        };\r\n    }\r\n\r\n    isValidChanged(newValue, oldValue) {\r\n        if (newValue !== oldValue)\r\n            this.element.dispatchEvent(new Event(\"blur\"));\r\n    }\r\n\r\n    attached() {\r\n        const options = $.extend(true, this.value, this.options);\r\n        $(this.element).inputmask(options)\r\n            .on(\"change\",\r\n            (e) => {\r\n                if (e.originalEvent) {\r\n                    return;\r\n                }\r\n                this.element.dispatchEvent(new Event(\"change\"));\r\n            });\r\n    }\r\n\r\n    reload() {\r\n        this.detached();\r\n        this.attached();\r\n    }\r\n\r\n    detached() {\r\n        $(this.element).inputmask(\"remove\");\r\n    }\r\n}"],"sourceRoot":".."}